def repeater(value):
    while True:
        yield value

"""
for x in repeater('Привет'):
    print(x)
"""

def bounded_repeater(value, max_repeats):
    for i in range(max_repeats):
        yield value

listcomp = ['Привет' for i in range(3)]
genexpr = ('Привет' for i in range(3))

"""Однако в отличие от включений в список выражения-генераторы не
конструируют объекты-списки. Вместо этого они генерируют значения
«точно в срок» подобно тому, как это сделал бы итератор на основе класса
или функция-генератор.
Присваивая выражение-генератор переменной, вы просто получите ите-
рируемый «объект-генератор»:
>>> listcomp
['Привет', 'Привет', 'Привет']
>>> genexpr
<generator object <genexpr> at 0x1036c3200>
"""


"""
Поскольку выражения-генераторы являются, скажем так, выражениями,
вы можете их использовать в одной строке вместе с другими инструкци-
ями. Например, вы можете определить итератор и употребить его прямо
на месте при помощи цикла for :
"""


for x in ('Buongiorno' for i in range(3)):
    print(x)

sum(x * 2 for x in range(10))