"""
Что такое менеджер контекста? Это простой «протокол» (или интерфейс),
который ваш объект должен соблюдать для того, чтобы поддерживать
инструкцию with. В сущности, если вы хотите, чтобы объект функционировал как менеджер контекста, от вас требуется только одно — добавить
в него методы __enter__ и __exit__. Python будет вызывать эти два метода
в соответствующих случаях в цикле управления ресурсом.
Давайте посмотрим, как это выглядит на практике. Вот пример простой
реализации контекстного менеджера open():
"""


class ManagedFile:
    def __init__(self, name):
        self.name = name

    def __enter__(self):
        self.file = open(self.name, 'w')
        return self.file

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.file:
            self.file.close()


"""
Python вызывает __enter__, когда поток исполнения входит в контекст
инструкции with и наступает момент получения ресурса. Когда поток
исполнения снова покидает контекст, Python вызывает __exit__, чтобы
высвободить этот ресурс
"""

with ManagedFile('hello.txt') as f:
    f.write('привет, мир!')
    f.write('а теперь, пока!')


"""
Написание красивых API с менеджерами контекста
Менеджеры контекста обладают достаточной гибкостью, и если к применению инструкции with подойти творчески, то для своих модулей
и классов вы сможете определять удобные API.
Например, что, если «ресурсом», которым мы хотели бы управлять, являются уровни отступа текста в некоей программе — генераторе отчетов?
Что, если бы для этого мы смогли написать исходный код, который выглядит вот так:
"""


class Indenter:
    def __init__(self):
        self.level = 0

    def __enter__(self):
        self.level += 1
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.level -= 1

    def print(self, text):
        print(' ' * self.level + text)


with Indenter() as indent:
    indent.print('привет!')
    with indent:
        indent.print('здорово')
        with indent:
            indent.print('бонжур')
    indent.print('эй')


