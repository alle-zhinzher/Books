"""См. документацию Python «Форматированные строковые литералы»:
https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals"""

error = 50159747054
name = 'Боб'

"""
        № 1. «Классическое» форматирование строковых значений

Здесь я использую спецификатор формата %s, чтобы сообщить Python, где
подставить значение переменной name, представленной в виде строкового
значения. Этот способ называется «классическим» форматированием
строк1
"""

text = 'Эй, %s! Вот ошибка 0x%x!' % (name, error)
print(text)
text = 'Эй, %(name)s! Вот ошибка 0x%(error)x!' % {"name": name,
                                                  "error": error}
print(text)

"""
        № 2. «Современное» форматирование строковых значений
Форматирование теперь обрабатывается вызовом функции format() со
строковым объектом1.
Функция format() может применяться для выполнения простого позиционного форматирования,
точно так же, как вы могли поступать в случае
с «классическим» форматированием
"""

print('Эй, {name}! Вот ошибка 0x{error:x}!'.format(name=name, error=error))


"""
        № 3. Интерполяция литеральных строк
Этот новый способ форматирования строк позволяет использовать выражения Python,
которые встраиваются в строковые константы. Ниже дан простой пример,
который поможет вам проникнуться этим функциональным средством языка:
"""

a = 5
b = 10
print(f'Пять плюс десять равняется {a + b}, а не {2 * (a + b)}.')