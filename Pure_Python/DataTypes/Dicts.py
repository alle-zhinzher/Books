from types import MappingProxyType
from collections import ChainMap
from collections import defaultdict
import collections

d = collections.OrderedDict(one=1, two=2, three=3)
print(d)
d['четыре'] = 4
d.keys()

'''
Класс defaultdict — это еще один подкласс словаря, который в своем
конструкторе принимает вызываемый объект, возвращаемое значение
которого будет использовано, если требуемый ключ нельзя найти 1 .
'''
dd = defaultdict(list)
# Попытка доступа к отсутствующему ключу его создает и
# инициализирует, используя принятую по умолчанию фабрику,
# то есть в данном примере list():
dd['собаки'].append('Руфус')
dd['собаки'].append('Кэтрин')
dd['собаки'].append('Сниф')
dd['cats'].append('mouse')
print(dd)

'''
Структура данных collections.ChainMap группирует многочисленные
словари в одну таблицу соответствия 1 . Поиск проводится по очереди во
всех базовых ассоциативных объектах до тех пор, пока ключ не будет
найден. Операции вставки, обновления и удаления затрагивают только
первую таблицу соответствия, добавленную в цепочку.
'''
dict1 = {'один': 1, 'два': 2}
dict2 = {'три': 3, 'четыре': 4}
chain = ChainMap(dict1, dict2)
print(chain)
# ChainMap выполняет поиск в каждой коллекции в цепочке
# слева направо, пока не найдет ключ (или не потерпит неудачу):
print(chain['три'])

'''
MappingProxyType — это обертка стандартного словаря, которая предо-
ставляет доступ только для чтения данных обернутого словаря 2 . Этот

Общие структуры данных Python
класс был добавлен в Python 3.3 и может использоваться для создания
неизменяемых версий словарей.

Например, он может быть полезен, если требуется вернуть словарь,
передающий внутреннее состояние из класса или модуля, при этом
препятствуя доступу к этому объекту для записи. Использование
MappingProxyType позволяет вводить эти огра
'''
writable = {'один': 1, 'два': 2}  # доступный для обновления
read_only = MappingProxyType(writable)
# Этот представитель/прокси с доступом только для чтения:

print(read_only['один'])

# Обновления в оригинале отражаются в прокси:
writable['один'] = 42
print(read_only)
